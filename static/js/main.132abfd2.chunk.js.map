{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","require","etherscanBaseUrl","axios","defaults","baseURL","CancelButton","voteState","cancelAction","useState","show","setShow","handleClose","variant","type","disabled","onClick","onHide","Header","Title","Body","Footer","VoteButton","VoteHeader","VotedStats","voteAvg","marketPrice","daoBalance","Text","parseFloat","toPrecision","Stats","className","isNaN","App","props","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","VoteContract","networks","instance","Contract","abi","address","setState","votesInstance","account","votingAvg","getMarketPrice","getDAOBalance","alert","error","state","undefined","voteFee","voteWeight","etherscanLink","votes","handleIssueVote","bind","handleChangeVote","handleCancelVote","handleChange","component","events","VoteIssued","fromBlock","toBlock","on","event","voter","returnValues","fee","lockedDgdStake","Object","keys","includes","VoteChanged","VoteCancelled","this","preventDefault","methods","issueVote","send","from","res","setLastTransactionDetails","changeVote","cancelVote","tx","setInterval","totalVotedWeight","i","votesWithoutCancelled","values","filter","vote","parseInt","forEach","ax","create","timeout","get","then","data","result","err","response","asset","exchanges","markets","base","market","pair","push","length","Error","sum_exchange_price","urls","exchange","route","replace","map","url","splice","indexOf","priceData","price","getBalance","utils","fromWei","target","name","value","src","onSubmit","Group","controlId","Control","onChange","min","max","step","version","striped","hover","isKey","dataField","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.132abfd2.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component, useState } from \"react\";\nimport axios from \"axios\";\nimport VoteContract from \"./contracts/BurnFeePoll.json\";\nimport Web3 from \"web3\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport './App.css';\n\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Card from \"react-bootstrap/Card\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Image from \"react-bootstrap/Image\";\n\nimport BootstrapTable from \"react-bootstrap-table/lib/BootstrapTable\";\nimport TableHeaderColumn from \"react-bootstrap-table/lib/TableHeaderColumn\";\n\nconst a = require('awaiting');\nconst etherscanBaseUrl = \"https://rinkeby.etherscan.io\";\naxios.defaults.baseURL = \"https://hypnotortoise-eval-prod.apigee.net/cw\";\n\n// const daoStakeStorageContractAddress = \"0x320051bbd4eee344bb86f0a858d03595837463ef\";\n// const DAO_STAKE_ABI = [\n//   {\n//     \"constant\": true,\n//     \"inputs\": [],\n//     \"name\": \"totalLockedDGDStake\",\n//     \"outputs\": [\n//       {\n//         \"name\": \"\",\n//         \"type\": \"uint256\"\n//       }\n//     ],\n//     \"payable\": false,\n//     \"stateMutability\": \"view\",\n//     \"type\": \"function\"\n//   }\n// ]\n\nconst CancelButton = ({voteState, cancelAction}) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n\n  if (voteState === \"CANCELLED\") {\n    return <Button variant=\"light\" type=\"submit\" disabled>Cancel Vote</Button>;\n  } else {\n    return (\n      <>\n      <Button variant=\"light\" onClick={handleShow}>Cancel Vote</Button>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header CancelButton>\n          <Modal.Title>Cancel Vote</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Warning! If you cancel your vote you can't vote again! Are you sure you want to continue?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            No\n          </Button>\n          <Button variant=\"primary\" type=\"submit\" onClick={cancelAction}>\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </>\n    );\n  }\n}\n\nconst VoteButton = ({voteState}) => {\n  if (voteState === \"CANCELLED\") {\n    return <Button variant=\"light\" type=\"submit\" disabled>{(voteState === \"NOT_VOTED\") ? \"Vote\" : \"Change Vote\"}</Button>;\n  } else {\n    return <Button variant=\"light\" type=\"submit\">{(voteState === \"NOT_VOTED\") ? \"Vote\" : \"Change Vote\"}</Button>;\n  }\n}\n\nconst VoteHeader = ({voteState}) => {\n   switch (voteState) {\n      case \"NOT_VOTED\":\n      case \"CANCELLED\":\n        return <Card.Header>Issue Vote</Card.Header>;\n      case \"VOTED\":\n        return <Card.Header>Change Vote</Card.Header>;\n      default:\n        break;\n    }\n}\n\nconst VotedStats = ({voteAvg, marketPrice, daoBalance}) => {\n  return (\n    <Card.Body>\n      <Card.Text>\n        Average Voted Fee: {voteAvg}\n      </Card.Text>\n      <Card.Text>\n        Expected Average Exchange Price based on Voted Fee: {\n          (\n            parseFloat(daoBalance/2e6)\n            - parseFloat(daoBalance/2e6)*voteAvg/100\n          )\n        }\n      </Card.Text>\n      <Card.Text>\n        Surplus over current Exchange Price: {\n          (\n            (\n              parseFloat(daoBalance/2e6)\n              - parseFloat(daoBalance/2e6)*voteAvg/100\n            )\n            - parseFloat(marketPrice).toPrecision(5)\n          )\n        }\n       </Card.Text>\n    </Card.Body>\n  );\n}\n\nconst Stats = ({voteAvg, marketPrice, daoBalance}) => {\n  return (\n    <Card className=\"bg-dark text-white\">\n      <Card.Header>Vote Statistics</Card.Header>\n      <Card.Body>\n        Average Exchange Price:\n          {isNaN(parseFloat(marketPrice)) ? \"Unknown\" : (<Card.Text>{parseFloat(marketPrice).toPrecision(5)} DGD/ETH</Card.Text>)}\n      </Card.Body>\n      <Card.Body>\n        Total ETH in MultiSig: {daoBalance || 0}\n      </Card.Body>\n      {(voteAvg < 0) ? (<Card.Body>No counting votes</Card.Body>) :\n        (<VotedStats voteAvg={voteAvg} marketPrice={marketPrice} daoBalance={daoBalance} />)\n      }\n    </Card>\n  );\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      votesInstance: undefined,\n      voteFee: undefined,\n      voteState: \"NOT_VOTED\",\n      voteWeight: undefined,\n      etherscanLink: etherscanBaseUrl,\n      voteAvg: undefined,\n      votes: {},\n      account: null,\n      web3: null,\n      marketPrice: undefined,\n      daoBalance: undefined\n    };\n\n    this.handleIssueVote = this.handleIssueVote.bind(this);\n    this.handleChangeVote = this.handleChangeVote.bind(this);\n    this.handleCancelVote = this.handleCancelVote.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VoteContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VoteContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ votesInstance: instance, web3: web3, account: accounts[0] });\n      this.addEventListener(this);\n      this.votingAvg();\n      this.getMarketPrice();\n      this.getDAOBalance();\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  // componentWillUnmount() {\n  //   this.unsubscribe();\n  // }\n\n  addEventListener(component) {\n    // get all issued votes events\n    component.state.votesInstance.events.VoteIssued({fromBlock: 0, toBlock: 'latest'})\n    .on('data', async (event) => {\n      var voter = event.returnValues.voter;\n      event.returnValues['voteFee'] = event.returnValues.fee;\n      event.returnValues['voteState'] = \"VOTED\";\n      event.returnValues['voteWeight'] = event.returnValues.lockedDgdStake;\n\n      var votes = component.state.votes;\n      votes[voter] = event.returnValues;\n      component.setState({ votes: votes });\n\n      if (Object.keys(component.state.votes).includes(component.state.account)) {\n        component.setState({ voteState: component.state.votes[component.state.account].voteState });\n        component.setState({ voteFee: component.state.votes[component.state.account].voteFee });\n      }\n    })\n    .on('error', console.error);\n\n    // get all changed votes events\n    component.state.votesInstance.events.VoteChanged({fromBlock: 0, toBlock: 'latest'})\n    .on('data', async (event) => {\n      var voter = event.returnValues.voter;\n      event.returnValues['voteFee'] = event.returnValues.fee;\n      event.returnValues['voteState'] = \"VOTED\";\n      event.returnValues['voteWeight'] = component.state.votes[voter].voteWeight;\n\n      var votes = component.state.votes;\n      votes[voter] = event.returnValues;\n      component.setState({ votes: votes });\n\n      if (Object.keys(component.state.votes).includes(component.state.account)) {\n\n        component.setState({ voteState: component.state.votes[component.state.account].voteState });\n        component.setState({ voteFee: component.state.votes[component.state.account].voteFee });\n      }\n    })\n    .on('error', console.error);\n\n    // get all cancelled votes events\n    component.state.votesInstance.events.VoteCancelled({fromBlock: 0, toBlock: 'latest'})\n    .on('data', async (event) => {\n      var voter = event.returnValues.voter;\n      event.returnValues['voteFee'] = component.state.votes[voter].voteFee;\n      event.returnValues['voteState'] = \"CANCELLED\";\n      event.returnValues['voteWeight'] = component.state.votes[voter].voteWeight;\n\n      var votes = component.state.votes;\n      votes[voter] = event.returnValues;\n      component.setState({ votes: votes });\n\n      if (Object.keys(component.state.votes).includes(component.state.account)) {\n        component.setState({ voteState: component.state.votes[component.state.account].voteState });\n        component.setState({ voteFee: component.state.votes[component.state.account].voteFee });\n      }\n    })\n    .on('error', console.error);\n\n    // console.log(component.state.votes)\n  }\n\n  async handleIssueVote(event) {\n    if (typeof this.state.votesInstance !== 'undefined') {\n      event.preventDefault();\n      let res = await this.state.votesInstance.methods.issueVote(this.state.voteFee).send({from: this.state.account});\n      this.setLastTransactionDetails(res);\n    }\n  }\n\n  async handleChangeVote(event) {\n    if (typeof this.state.votesInstance !== 'undefined') {\n      event.preventDefault();\n      let res = await this.state.votesInstance.methods.changeVote(this.state.voteFee).send({from: this.state.account});\n      this.setLastTransactionDetails(res);\n    }\n  }\n\n  async handleCancelVote(event) {\n    if (typeof this.state.votesInstance !== 'undefined') {\n      event.preventDefault();\n      let res = await this.state.votesInstance.methods.cancelVote().send({from: this.state.account});\n      this.setLastTransactionDetails(res);\n    }\n  }\n\n  // update etherscanLink\n  setLastTransactionDetails(res) {\n    if(res.tx !== 'undefined')\n    {\n      this.setState({etherscanLink: etherscanBaseUrl+\"/tx/\"+res.tx})\n    }\n    else\n    {\n      this.setState({etherscanLink: etherscanBaseUrl})\n    }\n  }\n\n  // Calculate Voting Average\n  async votingAvg() {\n    if (typeof this.state.votesInstance !== 'undefined') {\n      // var DigixDAOStakeStorage = new this.state.web3.eth.Contract(DAO_STAKE_ABI, daoStakeStorageContractAddress);\n      // var totalLockedWeight = await DigixDAOStakeStorage.methods.totalLockedDGDStake().call({from: this.state.account});\n      setInterval(() => {\n        var voteAvg = 0;\n        var [totalVotedWeight, i] = [0, 0];\n        var votesWithoutCancelled = Object.values(this.state.votes).filter(vote => vote.voteState !== \"CANCELLED\");\n        while(votesWithoutCancelled[i]) {\n          totalVotedWeight += parseInt(votesWithoutCancelled[i].voteWeight);\n          i++;\n        }\n        // console.log(totalVotedWeight);\n        if (totalVotedWeight > 0) {\n          votesWithoutCancelled.forEach((vote) => {\n            voteAvg += parseFloat(parseInt(vote.voteFee) * parseInt(vote.voteWeight) / totalVotedWeight);\n          });\n          this.setState({voteAvg: parseInt(voteAvg)});\n        } else {\n          this.setState({voteAvg: -1});\n        }\n      }, 1000);\n    }\n  }\n\n  // fetch current average market price for ETH/DGD pair\n  async getMarketPrice() {\n    try {\n      const ax = axios.create({ timeout: 1000 });\n      var asset = await ax.get('/assets/dgd')\n      .then(\n        (res) => { return res.data.result },\n        (err) => { if (err.response) {\n          throw err.response;\n        }}\n      );\n\n      var exchanges = [];\n      asset.markets.base.forEach((market) => {\n        if (market.pair === \"dgdeth\") {\n          exchanges.push(market);\n        }\n      });\n\n      if (exchanges.length < 1) {\n        throw Error(\"no exchanges found for DGD asset\");\n      };\n\n      var sum_exchange_price = 0;\n      var urls = [];\n      exchanges.forEach((exchange) => {urls.push(exchange.route.replace(\"https://api.cryptowat.ch\",\"\"))});\n      var prices = await a.map(urls, 3, async(url) => {\n        var data = await ax.get(url + \"/price\")\n        .then(\n          (res) => { return res.data.result },\n          (err) => { if (err.response) {\n            console.error(err.response);\n            urls.splice(urls.indexOf(url),1);\n            return 0;\n          }}\n        );\n        // console.log(data);\n        return data;\n      });\n      // console.log(prices);\n\n      prices.forEach((priceData) => {\n        sum_exchange_price = sum_exchange_price + priceData.price;\n      });\n      // console.log(sum_exchange_price);\n      this.setState({marketPrice: sum_exchange_price / urls.length});\n    } catch (err) {\n      console.error(err);\n      this.setState({marketPrice: \"Unknown\"});\n    }\n  }\n\n  // get ETH balance from DAO multi-sig contract\n  async getDAOBalance() {\n    const daoMultiSigContractAddress = \"0x75bA02c5bAF9cc3E9fE01C51Df3cB1437E8690D4\";\n    let web3 = undefined;\n    if (this.state.networkId !== 1) {\n      let provider = new Web3.providers.HttpProvider(\n        \"https://mainnet.infura.io/v3/8aad543c526449b78cacb050cb44f158\"\n      );\n      web3 = new Web3(provider);\n    } else {\n      web3 = this.state.web3;\n    }\n    var daoBalance = await web3.eth.getBalance(daoMultiSigContractAddress);\n    this.setState({daoBalance: web3.utils.fromWei(daoBalance)});\n  }\n\n  handleChange(event) {\n    switch(event.target.name) {\n      case \"voteFee\":\n        this.setState({\"voteFee\": event.target.value})\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row className=\"pb-3 justify-content-md-center\">\n          <Image\n              className=\"App-logo\"\n              src=\"logo.svg\"\n          />\n          </Row>\n          <Row className=\"pb-3 justify-content-md-center\">\n          <CardDeck>\n          <Card className=\"bg-dark text-white\">\n            <VoteHeader voteState={this.state.voteState} />\n            <Card.Body>\n              <Form onSubmit={(this.state.voteState === \"VOTED\") ? this.handleChangeVote : this.handleIssueVote}>\n                <Form.Group controlId=\"fromIssueVote\">\n                  <Form.Control\n                  type=\"range\"\n                  name=\"voteFee\"\n                  value={this.state.voteFee || \"20\"}\n                  onChange={this.handleChange}\n                  min=\"0\"\n                  max=\"45\"\n                  step=\"1\"\n                  disabled={(this.state.voteState === \"CANCELLED\")}\n                />\n                <Form.Text>Vote for Burn Fee ({this.state.voteFee || \"20\"}%)</Form.Text>\n                <VoteButton voteState={this.state.voteState} />\n                </Form.Group>\n              </Form>\n              <Form>\n                <CancelButton voteState={this.state.voteState} cancelAction={this.handleCancelVote} />\n              </Form>\n              {(this.state.voteState === \"CANCELLED\") ? (\n                  <Card.Text className=\"mt-5 alert alert-info\">\n                    You previously cancelled your vote.<br />\n                    Can't vote again\n                  </Card.Text>\n                ) : null\n              }\n            </Card.Body>\n          </Card>\n          <Stats voteAvg={this.state.voteAvg} marketPrice={this.state.marketPrice} daoBalance={this.state.daoBalance} />\n          </CardDeck>\n          </Row>\n          <Row className=\"pb-3 justify-content-md-center\">\n          <Card className=\"w-100 bg-dark text-white\">\n          <Card.Header>Issued Votes (excludes votes cancelled)</Card.Header>\n          <Card.Body>\n            <BootstrapTable className=\"table-secondary\" version='4' data={Object.values(this.state.votes).filter(vote => vote.voteState !== \"CANCELLED\")} striped hover>\n              <TableHeaderColumn isKey dataField='voter'>Voter</TableHeaderColumn>\n              <TableHeaderColumn dataField='voteFee'>Fee(%)</TableHeaderColumn>\n              <TableHeaderColumn dataField='voteWeight'>Voting Weight</TableHeaderColumn>\n            </BootstrapTable>\n          </Card.Body>\n          </Card>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}